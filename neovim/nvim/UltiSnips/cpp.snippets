#////////////////////////////////////////////////////////////////////////////////////////////////////

snippet tem "template" 
template <typename float_t>
endsnippet

#////////////////////////////////////////////////////////////////////////////////////////////////////

snippet cl "class .h .. (class)"
#pragma once

namespace NS {

class ${1:`!p snip.rv = snip.basename or "name"`}${2:: Parent} {
	public:
		explicit ${1/(\w+).*/$1/}();
		virtual ~${1/(\w+).*/$1/}();

	private:
		// no copies
		${1/(\w+).*/$1/}(const ${1/(\w+).*/$1/}&);
		${1/(\w+).*/$1/}& operator=(const ${1/(\w+).*/$1/}&);
};

} // namespace NS
endsnippet

#////////////////////////////////////////////////////////////////////////////////////////////////////

snippet cl "class .cpp .. (class)"
#include "${1/(\w+).*/$1/}.h"

namespace NS {

${1:`!p snip.rv = snip.basename or "name"`}::${1/(\w+).*/$1/}() {}

${1/(\w+).*/$1/}::~${1/(\w+).*/$1/}() {}

} // namsespace NS

endsnippet 

#////////////////////////////////////////////////////////////////////////////////////////////////////

snippet for "for loop (rvg)"
for(int ${1:i}=0; $1<${2:count}; ++$1) {
	${0}
}
endsnippet

#////////////////////////////////////////////////////////////////////////////////////////////////////

snippet dbg "debug print (rvg)"
DEBUG_PRINT << "Hi";
endsnippet

#////////////////////////////////////////////////////////////////////////////////////////////////////

snippet break "debug breakpoint (rvg)"
DEBUGGER_BREAK();
endsnippet

#////////////////////////////////////////////////////////////////////////////////////////////////////

# vim:ft=snippets:
